import Config from "../Config";
import {Annotation} from "../model/Annotation";
import {ElucidateAnnotation} from "../model/ElucidateAnnotation";

export default class Elucidate {
  static readonly host = Config.ELUCIDATE_HOST;
  static readonly tr = Config.TEXTREPO_HOST;

  static readonly headers = {
    "Accept": "application/ld+json; profile=\"http://www.w3.org/ns/anno.jsonld\"",
    "Content-Type": "application/ld+json; profile=\"http://www.w3.org/ns/anno.jsonld\""
  };

  public static async createCollection(): Promise<string> {
    const body = {
      "@context": ["http://www.w3.org/ns/anno.jsonld", "http://www.w3.org/ns/ldp.jsonld"],
      "type": ["BasicContainer", "AnnotationCollection"],
      "label": "Autogenerated container"
    };
    const res = await fetch(`${this.host}/annotation/w3c/`, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(body)
    });
    const responseBody = await res.json();
    let uuid = responseBody.id.match(/[0-9a-f-]{36}/)[0];
    return uuid;
  }

  public static async createAnnotation(collection: string, a: Annotation): Promise<string> {
    const body = {
      "@context": "http://www.w3.org/ns/anno.jsonld",
      "type": "Annotation",
      "body": {
        "type": "TextualBody",
        "value": a.label
      },
      // TODO: resolve $version_id
      "target": `${this.tr}/view/versions/$version_id/segments/index/${a.begin_anchor}/${a.begin_char_offset}/${a.end_anchor}/${a.end_char_offset}`
    };

    const res = await fetch(`${this.host}/annotation/w3c/${collection}/`, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(body)
    });

    const responseBody = await res.json();
    let uuid = responseBody.id.match(/[0-9a-f-]{36}/)[0];
    return uuid;
  }

  public static async getByBodyId(id: string): Promise<ElucidateAnnotation | undefined> {
    let queryParam = encodeURIComponent(id);
    const res = await fetch(
      `${this.host}/annotation/w3c/services/search/body?fields=id&value=${queryParam}`,
      {headers: this.headers}
    );
    const annotationPage = await res.json();
    const items = annotationPage?.first?.items;
    return items ? items[0] as ElucidateAnnotation : undefined;
  }
}
