import Config from "../Config";
import {Annotation, ENTITY, NS_PREFIX, toAnnotation} from "../model/Annotation";
import {ElucidateAnnotation} from "../model/ElucidateAnnotation";

export default class Elucidate {
  static readonly host = Config.ELUCIDATE_HOST;
  static readonly tr = Config.TEXTREPO_HOST;

  static readonly headers = {
    "Accept": "application/ld+json; profile=\"http://www.w3.org/ns/anno.jsonld\"",
    "Content-Type": "application/ld+json; profile=\"http://www.w3.org/ns/anno.jsonld\""
  };

  public static async createCollection(): Promise<string> {
    const body = {
      "@context": ["http://www.w3.org/ns/anno.jsonld", "http://www.w3.org/ns/ldp.jsonld"],
      "type": ["BasicContainer", "AnnotationCollection"],
      "label": "Autogenerated container"
    };
    const res = await fetch(`${this.host}/annotation/w3c/`, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(body)
    });
    const responseBody = await res.json();
    return getCollectionId(responseBody);
  }

  public static async createAnnotation(versionId: string, a: Annotation): Promise<Annotation> {
    if (a.id) {
      throw Error('Should recreate existing annotation with ID: ' + a.id);
    }
    const body = {
      "@context": ["http://www.w3.org/ns/anno.jsonld", {
        "Entity": NS_PREFIX + ENTITY
      }],
      "type": ["Annotation", "Entity"],
      "creator": a.creator,
      "body": [
        {
          "type": "TextualBody",
          "purpose": "classifying",
          "value": a.entity_type
        },
        {
          "type": "TextualBody",
          "purpose": "commenting",
          "value": a.entity_text
        }
      ],
      "target": `${this.tr}/view/versions/${versionId}/segments/index/${a.begin_anchor}/${a.begin_char_offset}/${a.end_anchor}/${a.end_char_offset}`
    };

    const res = await fetch(`${this.host}/annotation/w3c/${versionId}/`, {
      method: "POST",
      headers: this.headers,
      body: JSON.stringify(body)
    });

    const responseBody = await res.json();
    return toAnnotation(responseBody as ElucidateAnnotation);
  }

  public static async getByBodyId(id: string): Promise<ElucidateAnnotation | undefined> {
    let queryParam = encodeURIComponent(id);
    const res = await fetch(
      `${this.host}/annotation/w3c/services/search/body?fields=id&value=${queryParam}`,
      {headers: this.headers}
    );
    const annotationPage = await res.json();
    const items = annotationPage?.first?.items;
    return items ? items[0] as ElucidateAnnotation : undefined;
  }
}

function getCollectionId(id: string): string {
  let found = id.match(/[0-9a-f-]{36}/)?.[0];
  if (!found) {
    throw new Error('Could not find collection id in ' + id);
  }
  return found;
}

